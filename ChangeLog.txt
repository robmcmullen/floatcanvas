The Change Log for FloatCanvas.

-2/12/08

* Transfered to wxPython add ons SVN server -- thanks Robin!

-10/25/07

* Applied a patch from Tim Ansel for the UnBindAll() DrawObject method.
This turned up a bug in hit-testing for foreground objects, so I fixed
that too.

* Applied Tim Ansel's patch for adding KeyEvents


-8/27/07

* Added PieChart object to floatcanvas/SpecialObjects, and a deom of it in Demos.
  Thanks for Tim Ansel for writing the first version
  
* fixed a bug so that in _ResetBoundingBox, if the overall bounding box
has no width or height, the BB is set to None.

* Added a Arc object to FloatCanvas.

-7/17/07

* added a few new features to the BBox object.

* added a Bind() method to the Group Object -- it captures events on all
the objects in the groupo, and returns the group object.

* Added a new demo -- Tree.py. It shows how to make an editable
hierarchical tree with FloatCanvas.

-4/30/2007

* Replaced most (all?) of the BoundingBox code in FloatCanvas.py with
calls to the BBox module.

* Changed font code to calculate a font scaling by checking to see how
many pixels tall a "X" is. This scaling is used to compute form sizes
form teh pixel sizes used internally by FloatCanvas. This should make
fonts the same pixel size on all machines.

I tried to use wx.FontFromPixelSize(), but on MS-Windows you need to
specify a width too, and even though I found a width/height ratio that
was OK, I think all letter were getting stretched and didn't look to
good. Man, this is harder than it should be!

-4/09/2007

* fixed hit-test bug on OS-X! This required a bit of a re-factor, but it
works now.

* A bunch of merging of changes into the SVN version Christian set up

* Changed the keyword "underline" to "underlined" everywhere in the
various font code.  -- there was a mixture before.

3/06/2007 * Update for wxPython 2.8.1 - Added a hack to get around
toolbar bug with 2.8.1 on OS-X -

-2/13/2007

* Fixed a bug where GUI.UpdateScreen was called on None.

* Fixed a bug in Demos/MouseTest.py -- GUIMode can't be imported until
after a wx.App is created.


*****Release 0.9.17*****

-1/19/2007 * Only fully tested and working with wxPython2.6

* Tested with wxPython 2.8 on OS-X: Hit-testing doesn't work, I expect
that it's a change in the binary format of the off-screen bitmap Also
the "Zoom To Fit" button isn't showing up in the toolbar of NavCanvas.

It's been a while -- I hope I catch them all:

*Refactored the way Mouse events are handled. This was inspired, and
some of the code written, but Christian Blouin. There is now a GUIMode
module that holds a set of classes for handling all the mouse events. So
now the FloatCanvas.SetMode() method takes a GUIMode object as input,
rather than a string. To impliment your own GUI modes, you can create a
new GUIMode object, subclassed from GUIMode.GUIBase, or one of the
existing modes, changing only those handlers that you want to change.
The hope is that this will make it easier to make apps that allow the
user to interact with the canvas: simply set up a new GUI mode that does
what you want. Unfortuately, I haven't integrated that into any of the
demos yet!

* Changed the default ZoomIn, ZoomOut, and Move modes so that the mouse
wheel zooms in and out -- kind of like Google Earth.

* Completed the transition to numpy 1.*

* The mouse move event is always raised in the standard GUI modes.

* Cleaned up the NavCanvas code a lot: RadioTool, lamdas to pass the
modes, etc.

* Added an AddObjects() method

* Added a Merge() method to the bounding box class

* Added a Group DrawObject class -- it take a sequence of DrawObjects,
and that can then be treated as one, at least with .Visible, SetColor
etc. I'd like to make this more full featured. Inparticular, make a
Relative version, that would have all the coords relative to the group,
rather than world coords.

* Add a set of Setcolor() etc. methods to the DrawObject base class, so
that every DrawObject will at least have an empty method there. This
allows code to loop through lsits of DrawObjects and set properties.

* Moved the enheritance order of all the DrawObjects, inheriting
DrawObject last, to make sure that any method overridden in the mixins
will be used.

-10/05/2006

* changed to use numpy only. Sorry about that for Numeric and numarray
users, but I don't want to support multiple APIs, and the sooner we all
move to numpy the better. You can probably still use one of the other
packages in your code -- FloatCanvas generally calls numpy.asarray on
inputs, so it will efficiently convert other arrays.

-8/16/2006

* Edited to support numpy 1.0beta (and future numpys, I hope).
FloatCanvas now requires numpy -- keeping Numeric an numarray support
just didn't seem worth it. However, you should still be able touse
either of those in your user code, and numpy will use the array inteface
to efficiently transfer data. I'm not testing this, however.

-8/14/2006

* Added a BBox class, for doing BBox calculations. It is a subclass of
numpy array, so it can be used in place of the old BBox array.


**Release: 0.9.15**

-7/24/2006

* Added a Move() method to the PointsObjectMixin class

-7/21/2006

* disabled the hit-test code if the display has less that 24bpp. I had
recieved reports of problems with 166bpp displays, so I thought it was
better to disable it.

-6/15/2006

* replaced all the event binding functions with wx.PyEventBinder
objects. You can now use the FloatCavas.Bind() method to bind (and
unbind) events.

* Added a DrawRect.py demo: lets you draw rectangles on the Canvas with
the mouse.

* fixed a bug in the RectEllipse CalcBoundingBox code -- it wasn't
correct if the height or width was < 0

* Made the BNAEditor self-contained, and added it to the released demos


**Release: 0.9.13**

-6/13/2006

* Added FloatCanvas.MinScale and FloatCanvas.MaxScale attributes. They
default to None. If not None, they set the max and min scale factor when
zooming, so you can't zoom beyond that limit. Scale is the multiplier to
go from world to pixel units. Trial and error is probably the easiers
way to figure out what makes sense for your app.

* Removed the __getattr__ method from NavCanvas. Now you need to
reference the Canvas in the NavCanvas explicitly. This allows ordinary
attribute setting and getting.

* Re-factored to put all the initialization of attributes in an
InitAll() method. FloatCanvas.InitAll() can now be called to re-set the
Canvas to defaults. (and remove all DrawObjects)



-6/01/2006

* Added support for a "grid" to be drawn over or under the Image. Along
with a sample grid object. It can be done by adding a Grid object to one
(or both) of:

FloatCanvas.GridUnder and/or FloatCanvas.GridOver

A DotGrid class is provided as an example. See Demos/GridDemo.py for an
example of use.


-5/08/2006

* changed to using wx.Color.Get() to get a tuple of colors for the
HitTest dictionary, instead of wx.Color.Red(), etc....

**Release: 0.9.12**

-3/08/2006

* changed the numpy (etc) import to:

import numpy as N

* added an ArrowLine object

* Optimized Arrow object code a bit.

-1/17/2006

* A few changes to the Onsize() routine, so that the building of buffers
is more modular, and only what needs doing is done. Fixed a bug on OS-X
when trying to make a (0,0) sized bitmap

* Added a maximum latitude for the flat earth projection.

-1/04/2006

* Added a "log" to the demo, so that events can make changes to the log,
rather than just printing to the console.

Made all the print commands for hit test, etc, all go there.

-9/14/2005

Added SquarePoint to demo

-8/09/2005 Finished fixing the demo, so that it works with the API
change of all x,y pairs being passed in as a pair (see next entry)

Fixed a bug in the Circle object, forcing float division in calculating
coordinates from the center and diameter. Also added a "from __future__
import division" call so that that won't happen again.

-6/10/2005 Changed all DrawObjects to take an (x,y) pair rather than
individual x,y parameters. Also changed rectangles and ellipses to take
(w,h) pair. This is an API change, but should be easy to accomidate, all
you need to do is add a parenthesis pair:

(...x, y, ...) --->  (...(x,y), ...)

-6/08/2005

Added a type parameter to FloatCanvas.SaveAsImage(), so that images can
be saved in various formats. Defaults to PNG. Also added it to the demo,
under the File->SavePNG menu item.

Added a "Visible" attribute, so that objects can be shown or not without
removing them from the Canvas. The constructor has a new parameter:
IsVisible, that defaults to True. To change after constructing, there
are two new DrawObject methods: Show() and Hide() There is a simple demo
of this in the Demo, under the Tests-->Hide menu


-6/01/2005

Replaced the Icons used for the toolbar in NavCanvas. The new ones are
transparent, so should look better on a variety of OSs and themes.

Added Cursors that are set when the Mode changes, A Magnifying glass for
zoom-in, etc.

-3/25/2005

Added a ScaledTextBox, with auto-wrapping, etc.

Added Scaled and Unscaled Bitmap Objects.

5/10/2005

* Added a HitCoordsPixel attribute to the Object when hit.

-7/26/2004

* fixed a bug where a blank image was always getting blitted to the
screen on a Draw() call.

* Added an Arrow object (non-scalable)

-7/21/2004

* Changed the name of FloatCanvas.Move() to FloatCanvas.MoveImage(). It
turns out there is already a wx.Window.Move() method that I had
accidentally overridden

* Added Mouse-Wheel Scrolling to Demo: up-down scrolling with wheel,
right-left with wheel+ctrl

-7/16/2004

* Moved a few more methods into the XYObjectMixin and the
PointsObjectMixin

* Changed PointSet to use DrawEllipseList.. quite a bit faster for
anything more than 100 points.

* Added a Point Type, just like PointSet, but one point. The use of
DrawEllipselist slowed down the single point option, so I thought I'd
make them separate.

* Added a set of methods to the objects to change various properties:
Color, line and fill styles, etc.

-6/04/2004

* Removed an extra Yield() call--fixing a wierd bug with re-sizing
breaking

-6/03/2004

* make it work with numarray: NOTE: it is a LOT slower (2.5 - 10 times
slower!)

* Re-integrate it with the wxPython demo

-5/07/2004

* Changed the Text object to calculate the Width and Height only when
first Drawn. This makes creation faster, and eliminates a bug on GTK or
Mac-one or the other!

* Got it working on OS-X

- 3/01/2004

* Make it a package

* Have the buffer blit to the screen during a move

* Use fixdc.py, so that it conforms to future wx.DC API

* The Demo now tries to import the floatcanvas package, and it if fails,
it specifically imports the wxPython.lib version

* Get it working with 2.5.

* Added a bunch of optimizations suggested by Leo Kreymborg

* Replaced the ColorGenerator class with a python Generator (courtesy of
Leo Kreymborg)

-??/??/2003

* Re-structure to separate canvas from controls. Right now I have the
navigation controls mixed up with the actual drawing canvas. You can
turn them off, but it's kind of messy. I'd like to get at least this
done before the wxPython2.5 release

* put the mouse-o-meter in the status bar of the Demo

* Add a zoomable text Object.

* Cache fonts.

*Check out text size issues: Windows vs. GTK : this is a problem with
DC.GetPPI(): PPI is not reported correctly: specify fonts in pixels
instead, assuming 72dpi. I've addressed this by having the user specify
fonts in pixel sizes, rather than points, so it should look the same on
various systems.

* Implement hit-testing, using an off-screen hit-test bitmap. I think
that's the only way to implement hit-testing that will be fast enough
with a lot of object, particularly if you want to catch mouse-overs.

* Re-structure the foreground/background code.

* Have the Add Object code add a method to FloatCanvas' __dict__ when it
creates one.--now it creates them all at module __init__ instead.

* Make a web page for it!



